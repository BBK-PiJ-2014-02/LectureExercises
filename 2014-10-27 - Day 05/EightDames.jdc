/** Day 5 - Exercise 6 - Eight Dames **/

ChessCalc cc = new ChessCalc(8,8);
cc.place(3);
//cc.show();

class ChessCalc {
  int xSize, ySize;
  ChessBoard cb, tmpCb;
  Dame dameList[];

  ChessCalc(int x, int y) {
    this.cb    = new ChessBoard(x,y);
    this.tmpCb = new ChessBoard(x,y);
    this.xSize = x;
    this.ySize = y;
  }

// DEBUG
void pause(String str) { System.out.println(str); System.console().readLine(); }

  void place(int d) {
    this.dameList = new Dame[d];
    // Initialize with dame zero
    refreshAll();
    int dame = 0;

    while( !tmpCb.isLastPosition(this.dameList[dame]) ) {
pause("dame: "+dame);
      if ( this.dameList[dame] == null ) {
        this.dameList[dame] = new Dame(0,0);
      }
      else {
pause("dame NOT NULL: "+dame+"("+dameList[dame].x+","+dameList[dame].y+")");
        // Save current Dame into dd
        Dame dd = dameList[dame];
        // Reset the board where this dame is
        dameList[dame] = null;
        tmpCb.reset(dameList);
        // find the next position for the dame

tmpCb.display();
pause("dd NOT NULL: "+dame+"("+dd.x+","+dd.y+")");

        tmpCb.next(tmpCb,dd);
tmpCb.display();
pause("dd2 NOT NULL: "+dame+"("+dd.x+","+dd.y+")");
        // Check for first position starting with the one previously next-set until one is found
        while ( !tmpCb.isDameSafe(dd) && !tmpCb.isLastPosition(dd) ) {
          dd = tmpCb.next(tmpCb,dameList[dame]);
        }
        
        // If we reached the end of the board without
        // a safe position, we need to move previous dame forward
        if ( tmpCb.isLastPosition(dd) ) {
          // If this is the first dame ends the search
          if ( dame == 0 ) {
            break;
          }
          else {
            dameList[dame] = null;
            pause("dame-1");
            // call same all again with dame-1
            dame--;
          }
        } 
        else {
          this.dameList[dame] = dd;
          // If this was the last dame to be added, end
          if ( dame+1 == d ) {
            break;
          }
          // Check next possible dame to be positioned
          else {
            pause("dame+1");
            // call this all again with dame+1
            dameList[dame+1] = dd;
            dame++;
          }
//        tmpCb.next(tmpCb,dameList[dame]);
        }
      }
      
      displayDames();
      refreshTestBoard();
      tmpCb.display();
      pause("2");
    } // End while
  }

  boolean getNextPosition(ChessBoard cb, Dame[] dameList, int dameIndex) {
    if ( dameIndex > dameList.length ) {
      return true;
    }
    
    if ( dameList[dameIndex] == null ) {
      dameList[dameIndex] = new Dame(0,0);
    }
    
//    while( !cb.isLastPosition(dameList[dameIndex]) ) {
//      // Get next safe position
//      if ( dameList[dameIndex] == null ) {
//      }
//      displayDames();
//      refreshTestBoard();
//      cb.display();
//      pause();
//    } // End while
    return true;
  }
  
  void displayDames() {
    for ( int i = 0; i < this.dameList.length; i++ ) {
      if ( this.dameList[i] != null ) {
        System.out.println("DAME: "+i+"("+this.dameList[i].x+","+this.dameList[i].y+")");
      }
      else {
        System.out.println("DAME: "+i+"(null,null)");
      }
    }
  }
  
  // Place damesList onto a clean tmp Chess Board
  void refreshTestBoard() {
    this.tmpCb.reset(dameList);
  }
  
  // Place damesList onto a clean Chess Board.  
  void refreshBoard() {
    this.cb.reset(this.dameList);
  }

  void refreshAll() {
    refreshBoard();
    refreshTestBoard();
  }
  
  void show() {
  }
}

class Dame {
  int x, y;
 
  Dame(int x, int y) {
    this.x = x;
    this.y = y;
  }
  
  Dame(Dame d) {
    this.x = d.x;
    this.y = d.y;
  }
  
  // Move dame into the next safe position from current x,y 
  // to next left to right, top to bottom position
  Dame moveNextSafe(ChessBoard cb, Dame[] dameList, int dameIndex) {
    dameList[dameIndex] = null;
    cb.reset(dameList);
    for ( int y = this.y; y < cb.yMax; y++ ) {
      int x;
      if ( y == this.y ) {
        x = this.x;
      }
      else {
        x = 0;
      }
      for ( ;x < cb.xMax; x++ ) {
        if ( this.x == x && this.y == y ) {
          continue;
        }
        if ( cb.isDameSafe(x,y) ) {
          this.x = x;
          this.y = y;
//          dameList[dameIndex] = this;
          return this;
        }
      }
    }
    return null;
  }
  
  void display() {
    System.out.println("  dame("+this.x+","+this.y+")");
  }
}

class ChessBoard {
  String[][] matrix;
  String dame;
  int xMax;
  int yMax;

  ChessBoard() {
    this.matrix = new String[8][8];
    this.xMax = 8;
    this.yMax = 8;
    this.dame = "D";
  }
  
  ChessBoard(int x, int y) {
    this.matrix = new String[x][y];
    this.xMax = x;
    this.yMax = y;
    this.dame = "D";
  }

  void reset() {
    this.matrix = new String[this.xMax][this.yMax];
  }
  
  void reset(Dame[] dameList) {
    reset();
    setDames(dameList);
  }
  
  void display() {
    System.out.println("  0 1 2 3 4 5 6 7");
    for ( int i = 0; i < this.xMax; i++ ) {
      String row = i+"|";
      for ( int j = 0; j < this.yMax; j++ ) {
        if ( this.matrix[j][i] == null ) {
          row += ". ";
        }
        else {
          row += this.matrix[j][i]+" ";
        }
      }
      System.out.println(row);
    }
  }
  
  void setDame(int x, int y) {
    this.matrix[x][y] = this.dame;
  }

  void setDames(Dame[] d) {
    for( int i = 0; i < d.length; i++ ) {
      if ( d[i] != null ) {
        this.setDame(d[i].x,d[i].y);
      }
    }
  }
  
  Dame next(ChessBoard cb, Dame d) {
    if ( d.x+1 < cb.xMax ) {
      d.x++;
      return d;
    } else if ( d.y+1 < cb.yMax ) {
      d.x = 0;
      d.y++;
      return d;
    } else {
      return d;
    }
  }
  
  Dame getFirstDameSafe(ChessBoard cb, Dame[] dameList) {
    cb.reset(dameList);
    for(int y = 0; y < cb.yMax; y++ ) {
      for( int x = 0; x < cb.xMax; x++ ) {
        if( cb.isDameSafe(x,y) ){
          return new Dame(x,y);
        }
      }
    }
    return null;
  }
  
  boolean isLastPosition(Dame d) {
    if ( d != null && d.x+1 >= this.xMax && d.y+1 >= this.yMax ) {
      return true;
    }
    return false;
  }
  
  boolean isDameSafe(Dame d) {
    return this.isDameSafe(d.x,d.y);
  }
  
  // returns true if no dame in sight from x,y
  // horizontally, vertically or diagonally
  boolean isDameSafe(int x, int y) {
    // Dame has another on the same place.
    if ( this.matrix[x][y] != null && this.matrix[x][y].equals(this.dame) ) {
      return false;
    }
    
    // Horizontally 0 <-> this.x
    for ( int i = 0; i < this.xMax; i++ ) {
      if ( this.matrix[i][y] != null && this.matrix[i][y].equals(this.dame) ) {
        return false;
      }
    }
    
    // Vertically 0 <-> this.y
    for ( int j = 0; j < this.yMax; j++ ) {
      if ( this.matrix[x][j] != null && this.matrix[x][j].equals(this.dame) ) {
        return false;
      }
    }
    
    // Diagonally top to bottom left to right
    int i = x, j = y;
    while( i < this.xMax && j < this.yMax ) {
      if ( this.matrix[i][j] != null && this.matrix[i][j].equals(this.dame) ) {
        return false;
      }
      i++;
      j++;
    }
    
    // Diagonally bottom to top right to left
    i = x;
    j = y;
    while( i >= 0 && j >= 0 ) {
      if ( this.matrix[i][j] != null && this.matrix[i][j].equals(this.dame) ) {
        return false;
      }
      i--;
      j--;
    }

    // Diagonally top to bottom right to left
    i = x;
    j = y;
    while( i >= 0 && j < this.yMax ) {
      if ( this.matrix[i][j] != null && this.matrix[i][j].equals(this.dame) ) {
        return false;
      }
      i--;
      j++;
    }

    // Diagonally bottom to top left to right
    i = x;
    j = y;
    while( i < this.xMax && j >= 0 ) {
      if ( this.matrix[i][j] != null && this.matrix[i][j].equals(this.dame) ) {
        return false;
      }
      i++;
      j--;
    }
    return true;
  }
}