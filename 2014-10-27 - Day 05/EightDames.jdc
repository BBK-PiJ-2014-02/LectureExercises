/** Day 5 - Exercise 6 - Eight Dames **/

ChessCalc cc = new ChessCalc(8,8);
cc.setDames(8);
cc.placeDames();

class ChessCalc {
  int xSize, ySize;
  ChessBoard cb;
  ChessBoard results[];
  Dame dameList[];
  int damesToSet;
  boolean DEBUG = true;

  ChessCalc(int x, int y) {
    this.cb    = new ChessBoard(x,y);
    this.xSize = x;
    this.ySize = y;
  }

  // Return true if all dames have been set on the board
  boolean allDamesPlaced() {
    int dames = 0;

    for( int i = 0; i < dameList.length; i++ ) {
      if ( dameList[i] != null ) {
        dames++;
      }
    }

    if ( dames == this.damesToSet ) {
      return true;
    }

    return false;
  }
  
  void placeDames() {
    // Place all possible initial dames on the board
    placeMaxDames();

    do {
      if ( allDamesPlaced() ) {
        refreshBoard();
        cb.display();
        pause("ALL DAMES PLACED!!\nSearch for next solution?");
      }

      // If last dame cannot be placed on a new safe forward point, remove it.
      // Move previous dame to new safe position and repeat this until one is moved no more moves possible
      if ( getLastPlacedDameIndex() >= 0 ) {
        // We have a valid index try place more dames on the board after this one
        placeAllPossibleDamesAfterLast();
        if ( moveLastPlacedDame() < 0 ) {
          removeLastPlacedDame();
          moveLastPlacedDame();
          if ( placeAllPossibleDamesAfterLast() ) {
            removeLastPlacedDame();
          }
        }
      }
      
      refreshBoard();
      cb.display();
      pause("END.");
          
    } while ( getLastPlacedDameIndex() >= 0 );
  }
  
// DEBUG
void pause(String str) { System.out.println(str); System.console().readLine(); }

  // Setting the amount of dames to place on the board
  void setDames(int dames) {
    this.dameList   = new Dame[dames];
    this.damesToSet = dames;
  }
  
  // Check if all dames have been placed
  boolean allPlaced() {
    int index = getLastPlacedDameIndex();
    if ( dameList.length <= index+2 ) {
      return true;
    }
    return false;
  }
  
  /**
   * 1 - Place as many dames as possible on first possible postions
   * 2 - Move last dame into next safe position or return false
   * 3 - If not possible to move last dame more, remove it from dameList and repeat 2.
   *     If dame 0 reaches the end, exists
  **/
  
  // Place as many dames as possible on first possible positions
  // This is meant to be used at the beginning only.
  // NOTE: no ChessBoard refresh is done at this point
  void placeMaxDames() {
    // Start positioning from dame 0
    int dame = 0;
    
    while(dame < this.dameList.length) {
      dameList[dame] = this.cb.getNextDameSafe(dameList);
      if ( dameList[dame] == null ) {
        // All placed
        if ( DEBUG ) {
          System.out.println("\tplaceMaxDames() : dames placed = "+dame);
        }
        break;
      }
      dame++;
    }
  }
  
  // Start from the last dame placed and place any possible forwards
  boolean placeAllPossibleDamesAfterLast() {
    // Start positioning from dame 0
    int dame = getLastPlacedDameIndex();
    if ( DEBUG ) {
      displayDames();
      System.out.println("\tplaceAllPossibeDamesAfterLast() : last placed dame = "+dame);
    }
    
    // Move to next not-allocated
    dame++;

    while(dame < this.dameList.length) {
      dameList[dame] = this.cb.getNextDameSafe(dameList);
      if ( dameList[dame] == null ) {
        // All placed
        if ( DEBUG ) {
          System.out.println("\tplaceAllPossibeDamesAfterLast() : TRUE dame-NULL = "+dame);
        }
        return true;
      }
      dame++;
    }
    if ( DEBUG ) {
      System.out.println("\tplaceAllPossibeDamesAfterLast() : FALSE dame = "+dame);
    }
    return false;
  }
  
  // Move last dame into next safe position:
  // - last dame moved, returns dame index
  // - last dame did not find any more safe positions returns -1
  // NOTE: no ChessBoard refresh is done at this point
  int moveLastPlacedDame() {
    int dame = getLastPlacedDameIndex();
    if ( DEBUG ) {
      System.out.println("\tmoveLastPlacedDame() : last dame = "+dame);
    }

    if ( dameList[dame] != null && dame >= 0 ) {
      Dame d = dameList[dame];
      dameList[dame] = null;
      Dame test = cb.getNextDameSafe(dameList, d);
      if ( test != null ) {
        this.dameList[dame] = cb.getNextDameSafe(dameList, d);
        if ( DEBUG ) {
          System.out.println("\tmoveLastPlacedDame() : returning dame = "+dame);
        }
        return dame;
      }
      // Put last dame back
      else {
        this.dameList[dame] = d;
      }
    }
    if ( DEBUG ) {
      System.out.println("\tmoveLastPlacedDame() : returning -1");
    }

    return -1;
  }
  
  // Remove last dame from the dameList.
  void removeLastPlacedDame() {
    int dame = getLastPlacedDameIndex();
    if ( DEBUG ) {
      System.out.println("\tremoveLastPlacedDame() : last dame = "+dame);
    }
    if ( dame >= 0 ) {
      if ( DEBUG ) {
        System.out.println("\tremoveLastPlacedDame() : setting dame "+dame+" to NULL");
      }
      dameList[dame] = null;
    }
    else {
      if ( DEBUG ) {
        System.out.println("\tremoveLastPlacedDame() : nothing changed");
      }
    }
  }

  // Note: will return -1 if non-null dame valid index found
  //       Starts from the last dame to the first
  int getLastPlacedDameIndex() {
    int dames = this.dameList.length - 1;

    // Find last not null in dameList index
    for( int i = dames; i >= 0; i-- ) {
      if ( this.dameList[i] != null ) {
        if ( DEBUG ) {
          System.out.println("\tgetLastPlacedDameIndex() : returning dame index "+i);
          displayDames();
        }
        // Return this index
        return i;
      }
    }
    
    if ( DEBUG ) {
      System.out.println("\tgetLastPlacedDameIndex() : no dames found, returning -1 ");
    }

    return -1;
  }

  // Debugging  
  void displayDames() {
    for ( int i = 0; i < this.dameList.length; i++ ) {
      if ( this.dameList[i] != null ) {
        System.out.println("DAME: "+i+"("+this.dameList[i].x+","+this.dameList[i].y+")");
      }
      else {
        System.out.println("DAME: "+i+"(null,null)");
      }
    }
  }
  
  // Place damesList onto a clean Chess Board.  
  void refreshBoard() {
    this.cb.reset(this.dameList);
  }
}

class Dame {
  int x, y;
 
  Dame(int x, int y) {
    this.x = x;
    this.y = y;
  }
  
  Dame(Dame d) {
    this.x = d.x;
    this.y = d.y;
  }
  
  void display() {
    System.out.println("  dame("+this.x+","+this.y+")");
  }
}

class ChessBoard {
  String[][] matrix;
  String dame;
  int xMax;
  int yMax;

  ChessBoard() {
    this.matrix = new String[8][8];
    this.xMax = 8;
    this.yMax = 8;
    this.dame = "D";
  }
  
  ChessBoard(int x, int y) {
    this.matrix = new String[x][y];
    this.xMax = x;
    this.yMax = y;
    this.dame = "D";
  }

  void reset() {
    this.matrix = new String[this.xMax][this.yMax];
  }
  
  void reset(Dame[] dameList) {
    reset();
    setDames(dameList);
  }
  
  void display() {
    System.out.println("  0 1 2 3 4 5 6 7");
    for ( int i = 0; i < this.xMax; i++ ) {
      String row = i+"|";
      for ( int j = 0; j < this.yMax; j++ ) {
        if ( this.matrix[j][i] == null ) {
          row += ". ";
        }
        else {
          row += this.matrix[j][i]+" ";
        }
      }
      System.out.println(row);
    }
  }
  
  void setDame(int x, int y) {
    this.matrix[x][y] = this.dame;
  }

  void setDames(Dame[] d) {
    for( int i = 0; i < d.length; i++ ) {
      if ( d[i] != null ) {
        this.setDame(d[i].x,d[i].y);
      }
    }
  }
  
  // Given a board size and a dameList set on this board, get the next dame safe position or return null
  Dame getNextDameSafe(Dame[] dameList) {
    reset(dameList);
    for(int y = 0; y < this.yMax; y++ ) {
      for( int x = 0; x < this.xMax; x++ ) {
        if( this.isDameSafe(x,y) ){
          return new Dame(x,y);
        }
      }
    }
    return null;
  }

  // Given a board size and a dameList set on this board, 
  // place another dame from the given Dame coordinates
  Dame getNextDameSafe(Dame[] dameList, Dame d) {
    reset(dameList);
    int x = 0;
    for(int y = d.y; y < this.yMax; y++ ) {
      if ( y == d.y ) {
        x = d.x;
      } 
      else {
        x = 0;
      }
      for( ; x < this.xMax; x++ ) {
        // this is the new safe dame after d Dame
        if( this.isDameSafe(x,y) ){
          if ( x == d.x && y == d.y ) {
            continue;
          }
          return new Dame(x,y);
        }
      }
    }
    return null;
  }
  
  
  boolean isLastPosition(Dame d) {
    if ( d != null && d.x+1 >= this.xMax && d.y+1 >= this.yMax ) {
      return true;
    }
    return false;
  }
  
  boolean isDameSafe(Dame d) {
    return this.isDameSafe(d.x,d.y);
  }
  
  // returns true if no dame in sight from x,y
  // horizontally, vertically or diagonally
  boolean isDameSafe(int x, int y) {
    // Dame has another on the same place.
    if ( this.matrix[x][y] != null && this.matrix[x][y].equals(this.dame) ) {
      return false;
    }
    
    // Horizontally 0 <-> this.x
    for ( int i = 0; i < this.xMax; i++ ) {
      if ( this.matrix[i][y] != null && this.matrix[i][y].equals(this.dame) ) {
        return false;
      }
    }
    
    // Vertically 0 <-> this.y
    for ( int j = 0; j < this.yMax; j++ ) {
      if ( this.matrix[x][j] != null && this.matrix[x][j].equals(this.dame) ) {
        return false;
      }
    }
    
    // Diagonally top to bottom left to right
    int i = x, j = y;
    while( i < this.xMax && j < this.yMax ) {
      if ( this.matrix[i][j] != null && this.matrix[i][j].equals(this.dame) ) {
        return false;
      }
      i++;
      j++;
    }
    
    // Diagonally bottom to top right to left
    i = x;
    j = y;
    while( i >= 0 && j >= 0 ) {
      if ( this.matrix[i][j] != null && this.matrix[i][j].equals(this.dame) ) {
        return false;
      }
      i--;
      j--;
    }

    // Diagonally top to bottom right to left
    i = x;
    j = y;
    while( i >= 0 && j < this.yMax ) {
      if ( this.matrix[i][j] != null && this.matrix[i][j].equals(this.dame) ) {
        return false;
      }
      i--;
      j++;
    }

    // Diagonally bottom to top left to right
    i = x;
    j = y;
    while( i < this.xMax && j >= 0 ) {
      if ( this.matrix[i][j] != null && this.matrix[i][j].equals(this.dame) ) {
        return false;
      }
      i++;
      j--;
    }
    return true;
  }
}