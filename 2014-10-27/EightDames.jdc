/** Day 5 - Exercise 6 - Eight Dames **/

Dame ed = new Dame(8,8);
ed.setDame(3,5);
//ed.setDame(4,6); // NOT (4)
//ed.setDame(2,6); // yes (3)
//ed.setDame(2,4); // NOT (1)
//ed.setDame(4,4); // Yes (2)
System.out.println(ed.isDameSafe(2,6));
ed.display();

class Dame {
  String[][] matrix;
  String dame;
  int x;
  int y;

  Dame() {
    this.matrix = new String[8][8];
    this.x = 8;
    this.y = 8;
    this.dame = "D";
  }
  
  Dame(int x, int y) {
    this.matrix = new String[y][x];
    this.x = x;
    this.y = y;
    this.dame = "D";
  }

  Dame(int x, int y, String dame) {
    this.matrix = new String[y][x];
    this.x = x;
    this.y = y;
    this.dame = dame;
  }
  
  void display() {
    System.out.println("  0 1 2 3 4 5 6 7");
    for ( int i = 0; i < this.y; i++ ) {
      String row = i+"|";
      for ( int j = 0; j < this.x; j++ ) {
        if ( this.matrix[i][j] == null ) {
          row += ". ";
        }
        else {
          row += this.matrix[i][j]+" ";
        }
      }
      System.out.println(row);
    }
  }
  
  void setDame(int x, int y) {
    this.matrix[y][x] = this.dame;
  }

  void setDame(int x, int y, String d) {
    this.matrix[y][x] = d;
  }
  
  // returns true if no dame in sight from x,y
  // horizontally, vertically or diagonally
  boolean isDameSafe(int x, int y) {
    if ( this.matrix[y][x] != null && this.matrix[y][x].equals(this.dame) ) {
      return false;
    }
    
    // Horizontally 0 <-> this.x
    for ( int i = 0; i < this.x; i++ ) {
      if ( this.matrix[y][i] != null && this.matrix[y][i].equals(this.dame) ) {
        return false;
      }
    }
    
    // Vertically 0 ^\v this.y
    for ( int j = 0; j < this.y; j++ ) {
      if ( this.matrix[j][x] != null && this.matrix[j][x].equals(this.dame) ) {
        return false;
      }
    }
    
    // Diagonally top to bottom left to right
    int xOrigin;
    int yOrigin;
    if ( x >= y ) {
      xOrigin = x - y;
      yOrigin = 0;
      while ( yOrigin < this.y && xOrigin < this.x ) {
        if ( this.matrix[yOrigin][xOrigin] != null && this.matrix[yOrigin][xOrigin].equals(this.dame) ) {
          return false;
        }
        xOrigin++;
        yOrigin++;
      }
    } 
    else {
      yOrigin = y-x;
      xOrigin = 0;
      while ( yOrigin < this.y && xOrigin < this.x ) {
        if ( this.matrix[yOrigin][xOrigin] != null && this.matrix[yOrigin][xOrigin].equals(this.dame) ) {
          return false;
        }
        xOrigin++;
        yOrigin++;
      }
    }
    
    // Diagonally top to bottom right to left
//    if ( ( this.y - y ) <= ( this.x - x ) ) {
      xOrigin = this.x - 1;
      yOrigin = this.y - (this.y - x) - 1;
System.out.println("X:"+this.x+", x:"+x+", xO:"+xOrigin+"   Y:"+this.y+", y:"+y+", yO:"+yOrigin);
      while( yOrigin < this.y && xOrigin >= 0 ) {
        if ( this.matrix[yOrigin][xOrigin] != null && this.matrix[yOrigin][xOrigin].equals(this.dame) ) {
          return false;
        }
        this.matrix[yOrigin][xOrigin] = "X";
        xOrigin--;
        yOrigin++;
      }
//    } 
//    else {
//      yOrigin = ( (this.y - y) - (this.x - x) );
//      xOrigin = this.x - 1;
//      while ( xOrigin >= 0 && yOrigin >= 0 ) {
//        if ( this.matrix[yOrigin][xOrigin] != null && this.matrix[yOrigin][xOrigin].equals(this.dame) ) {
//          return false;
//        }
//        this.matrix[yOrigin][xOrigin] = "X";
//        xOrigin--;
//        yOrigin--;
//      }
//    }

    return true;

  }
}

