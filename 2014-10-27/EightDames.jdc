/** Day 5 - Exercise 6 - Eight Dames **/

ChessCalc cc = new ChessCalc(8,8);
cc.place(2);
//cc.show();

class ChessCalc {
  int xSize, ySize;
  ChessBoard cb, tmpCb;
  Dame dameList[];

  ChessCalc(int x, int y) {
    this.cb    = new ChessBoard(x,y);
    this.tmpCb = new ChessBoard(x,y);
    this.xSize = x;
    this.ySize = y;
  }

  void place(int d) {
    int dame = 0;
    this.dameList = new Dame[d];
    refreshAll();

    while( dame < d ) {
      if ( dameList[dame] == null ) {
        dameList[dame] = new Dame(0,0);
        refreshTestBoard();
        if ( dame <= d ) {
          dame++;
        }
      }
Dame dd = tmpCb.getFirstDameSafe(tmpCb,dameList);
System.out.println("Dame save:("+dd.x+","+dd.y+")");

      if ( dameList[dame] != null ) {
System.out.println("Moving dame: "+dame+" ("+dameList[dame].x+","+dameList[dame].y+")");
        Dame tmp = new Dame(dameList[dame].x,dameList[dame].y);
        dameList[dame] = null;
        tmp.moveNextSafe(tmpCb,dameList);
        dameList[dame] = tmp;
        refreshTestBoard();
      }
//      Dame tmp = new Dame(dameList[dame]);
//      if ( tmp.moveNextSafe(tmpCb,dameList) ) {
//      }
//      else {
//        break;
//      }


//      // This is the first time we are checking this one
//      if ( dameList[dame] == null && dame > 0 ) {
//        // Get last Dame's position to start from
//        dameList[dame] = new Dame(dameList[dame-1].x,dameList[dame-1].y);
//      }
//
//      // We are back at the beginning move first dame to next position
//      if ( dame == 0 ) {
//        Dame first = dameList[0];
//        dameList   = new Dame[d];
//        refreshTestBoard();
//        if ( first.moveNextSafe(tmpCb) ) {
//          dameList[0] = first;
//          // Special case
//          if ( d == 1 ) {
//            refreshTestBoard();
//          }
//          else {
//            dame++;
//            refreshTestBoard();
//          }
//          continue;
//        }
//        else {
//          // We reached the end
//          break;
//        }
//      }
//
//System.out.println(":> "+dame); System.console().readLine();
//
//      // This is not the first one, so lets carry on by finding the next possible place for this dame.
//      Dame next = dameList[dame];
//      if ( dameList[dame].moveNextSafe(tmpCb) ) {
//        refreshTestBoard();
//        // Found a next safe place for this dame. Carry on with next
//        if ( dame+1 < d ) {
//          dame++;
//        } else {
//          // Found one solution.
//          refreshAll();
//        }
//      } else {
//        // Not found a safe place for this dame. Need to move previous dame to a new place and see what we can do.
//        dameList[dame] = null;
//        dame--;
//      }

    } // End while

//    displayDames();
//    refreshAll();
//    cb.display();
  }

  void displayDames() {
    for ( int i = 0; i < this.dameList.length; i++ ) {
      if ( this.dameList[i] != null ) {
        System.out.println("DAME: "+i+"("+this.dameList[i].x+","+this.dameList[i].y+")");
      }
      else {
        System.out.println("DAME: "+i+"(null,null)");
      }
    }
  }
  
  // Place damesList onto a clean tmp Chess Board
  void refreshTestBoard() {
    this.tmpCb.reset(dameList);
displayDames();
tmpCb.display();
System.console().readLine();
  }
  
  // Place damesList onto a clean Chess Board.  
  void refreshBoard() {
    this.cb.reset(dameList);
  }

  void refreshAll() {
    refreshBoard();
    refreshTestBoard();
  }
  
  void show() {
  }
}

class Dame {
  int x, y;
 
  Dame(int x, int y) {
    this.x = x;
    this.y = y;
  }
  
  Dame(Dame d) {
    this.x = d.x;
    this.y = d.y;
  }
  
  // Move dame into the next safe position from current x,y 
  // to next left to right, top to bottom position
  boolean moveNextSafe(ChessBoard cb, Dame[] dameList) {
    cb.reset(dameList);
    for ( int y = this.y; y < cb.yMax; y++ ) {
      int x;
      if ( y == this.y ) {
        x = this.x;
      }
      else {
        x = 0;
      }
      for ( ;x < cb.xMax; x++ ) {
        if ( cb.isDameSafe(x,y) && (this.x != x || this.y != y) ) {
          this.x = x;
          this.y = y;
          return true;
        }
      }
    }
    return false;
  }
  
  void display() {
    System.out.println("  dame("+this.x+","+this.y+")");
  }
}

class ChessBoard {
  String[][] matrix;
  String dame;
  int xMax;
  int yMax;

  ChessBoard() {
    this.matrix = new String[8][8];
    this.xMax = 8;
    this.yMax = 8;
    this.dame = "D";
  }
  
  ChessBoard(int x, int y) {
    this.matrix = new String[x][y];
    this.xMax = x;
    this.yMax = y;
    this.dame = "D";
  }

  void reset() {
    this.matrix = new String[this.xMax][this.yMax];
  }
  
  void reset(Dame[] dameList) {
    reset();
    setDames(dameList);
  }
  
  void display() {
    System.out.println("  0 1 2 3 4 5 6 7");
    for ( int i = 0; i < this.xMax; i++ ) {
      String row = i+"|";
      for ( int j = 0; j < this.yMax; j++ ) {
        if ( this.matrix[j][i] == null ) {
          row += ". ";
        }
        else {
          row += this.matrix[j][i]+" ";
        }
      }
      System.out.println(row);
    }
  }
  
  void setDame(int x, int y) {
    this.matrix[x][y] = this.dame;
  }

  void setDames(Dame[] d) {
    for( int i = 0; i < d.length; i++ ) {
      if ( d[i] != null ) {
        this.setDame(d[i].x,d[i].y);
      }
    }
  }
  
  Dame getFirstDameSafe(ChessBoard cb, Dame[] dameList) {
    cb.reset(dameList);
    for(int y = 0; y < cb.yMax; y++ ) {
      for( int x = 0; x < cb.xMax; x++ ) {
        if( cb.isDameSafe(x,y) ){
          return new Dame(x,y);
        }
      }
    }
    return null;
  }
  
  boolean isDameSafe(Dame d) {
    return this.isDameSafe(d.x,d.y);
  }
  
  // returns true if no dame in sight from x,y
  // horizontally, vertically or diagonally
  boolean isDameSafe(int x, int y) {
    // Dame has another on the same place.
    if ( this.matrix[x][y] != null && this.matrix[x][y].equals(this.dame) ) {
      return false;
    }
    
    // Horizontally 0 <-> this.x
    for ( int i = 0; i < this.xMax; i++ ) {
      if ( this.matrix[i][y] != null && this.matrix[i][y].equals(this.dame) ) {
        return false;
      }
    }
    
    // Vertically 0 <-> this.y
    for ( int j = 0; j < this.yMax; j++ ) {
      if ( this.matrix[x][j] != null && this.matrix[x][j].equals(this.dame) ) {
        return false;
      }
    }
    
    // Diagonally top to bottom left to right
    int i = x, j = y;
    while( i < this.xMax && j < this.yMax ) {
      if ( this.matrix[i][j] != null && this.matrix[i][j].equals(this.dame) ) {
        return false;
      }
      i++;
      j++;
    }
    
    // Diagonally bottom to top right to left
    i = x;
    j = y;
    while( i >= 0 && j >= 0 ) {
      if ( this.matrix[i][j] != null && this.matrix[i][j].equals(this.dame) ) {
        return false;
      }
      i--;
      j--;
    }

    // Diagonally top to bottom right to left
    i = x;
    j = y;
    while( i >= 0 && j < this.yMax ) {
      if ( this.matrix[i][j] != null && this.matrix[i][j].equals(this.dame) ) {
        return false;
      }
      i--;
      j++;
    }

    // Diagonally bottom to top left to right
    i = x;
    j = y;
    while( i < this.xMax && j >= 0 ) {
      if ( this.matrix[i][j] != null && this.matrix[i][j].equals(this.dame) ) {
        return false;
      }
      i++;
      j--;
    }
    return true;
  }
}